district == "Karachi Central" ~ "Karachi City",
district == "Karachi East" ~ "Karachi City",
district == "Karachi Malir" ~ "Karachi City",
district == "Karachi South" ~ "Karachi City",
district == "Karachi West" ~ "Karachi City",
district == "Malakand P Area" ~ "Malakand PA",
district == "Sajawal" ~ "Sujawal",
district == "S Waziristan Agency" ~ "South Waziristan Agency",
district == "N Waziristan Agency" ~ "North Waziristan Agency",
district == "Sherani" ~ "Sheerani",
district == "Kambar Shahdad Kot" ~ "Qambar Shahdadkot",
district == "Lasbela" ~ "Las Bela",
district == "Leiah" ~ "Layyah",
district == "Sibbi" ~ "Sibi",
district == "Tando Allahyar" ~ "Tando Allah Yar",
district == "Tor Garh" ~ "Tor Ghar",
district == "Umer Kot" ~ "Umerkot",
TRUE ~ district)) %>%
arrange(district) %>%
group_by(district) %>%
summarise(no_of_eligible_beneficiaries = sum(no_of_eligible_beneficiaries),
amount_deposited_in_accounts = sum(amount_deposited_in_accounts),
no_of_beneficiaries_paid = sum(no_of_beneficiaries_paid),
amount_withdrawn = sum(amount_withdrawn)) %>%
filter(
!district == "Korangi",
!district == "Malir",
!district == "Duki",
!district == "Shaheed Sikandarabad"
) %>%   #Dropping Kambar Shahadat Kot, Korangi since not available in shapfile
#Also aggregating all Karachi dsitricts into Karachi City
mutate(share_of_actual_to_eligible_beneficiaries= no_of_beneficiaries_paid/no_of_eligible_beneficiaries * 100) %>%
left_join(pak_ind, by ="district") %>%
left_join(pakistan_indicators, by= "district") %>%
left_join(census, by= "district") %>%
mutate(eligible_beneficiaries_relative_to_district_population = (no_of_eligible_beneficiaries  * (hhsize / 1.3)) / (pop * (1+pop_gr^5)) * 100 ,
actual_beneficiaries_relative_to_district_population = (no_of_beneficiaries_paid * (hhsize / 1.3)) / (pop * (1+pop_gr^5))* 100  ) %>%
# mutate(eligible_beneficiaries_relative_to_district_population=no_of_eligible_beneficiaries/population *100,
#        actual_beneficiaries_relative_to_district_population= no_of_beneficiaries_paid/population* 100) %>%
mutate(
amount_deposited_in_accounts = amount_deposited_in_accounts / 1000000,
amount_withdrawn = amount_withdrawn / 1000000,
population = pop / 1000000) %>%
pivot_longer(cols =no_of_eligible_beneficiaries:actual_beneficiaries_relative_to_district_population,
names_to = "indicator", values_to = "value") %>%
mutate(category = "Category 2") %>%
mutate(indicator = str_to_title(str_replace_all(indicator, "_", " "))) %>%
left_join(units, by="indicator") %>%
filter(indicator!= "Household Size",
indicator!= "Pop",
indicator!=  "Hhsize",
indicator!= "Pop Gr",
indicator!= "Population") %>%
pivot_wider(names_from = district, values_from = value) %>%
mutate(`North Waziristan Agency` = NA,
`Tor Ghar` = NA) %>%
pivot_longer(cols = -c("indicator", "category", "unit") ,
names_to = "district",
values_to = "value")
colnames(ehsaas_data$Category_2)
data <-
ehsaas_data$Emergency_Cash_Total %>%
bind_rows(ehsaas_data$Category_1, ehsaas_data$Category_2) %>%
filter(!is.na(district))
colnames(data)
#For adding category 1 and 2
data1 <- data %>%
filter(category != "Ehsaas Cash Total",
indicator != "Actual Beneficiaries Relative To District Population",
indicator != "Eligible Beneficiaries Relative To District Population",
indicator !="Share Of Actual To Eligible Beneficiaries") %>%
group_by(district, indicator) %>%
summarise(value = sum(value)) %>%
ungroup() %>%
pivot_wider(district ,names_from = indicator , values_from = value) %>%
clean_names() %>%
left_join(census, by= "district") %>%
mutate(share_of_actual_to_eligible_beneficiaries= no_of_beneficiaries_paid/no_of_eligible_beneficiaries * 100,
eligible_beneficiaries_relative_to_district_population = (no_of_eligible_beneficiaries  * (hhsize / 1.3)) / (pop * (1+pop_gr^5)) * 100 ,
actual_beneficiaries_relative_to_district_population = (no_of_beneficiaries_paid * (hhsize / 1.3)) / (pop * (1+pop_gr^5))* 100  ) %>%
pivot_longer(cols =amount_deposited_in_accounts:actual_beneficiaries_relative_to_district_population,
names_to = "indicator", values_to = "value") %>%
mutate(category = "Category 1+2") %>%
mutate(indicator = str_to_title(str_replace_all(indicator, "_", " "))) %>%
left_join(units, by="indicator") %>%
filter(indicator!= "Household Size",
indicator!= "Pop",
indicator!=  "Hhsize",
indicator!= "Pop Gr",
indicator!= "Population")
colnames(data1)
data <- data %>%
bind_rows(data1)
colnames(data)
#SOurce
source <- import_list("Ehsaas_dashboard/Main_data/source.xlsx")
source1 <- source$source1
source2 <- source$source2
data <- data %>%
left_join(source1, by= "indicator") %>%
left_join(source2, by= "category")
colnames(data)
data %>%
write.csv("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.csv")  To be shared
data %>%
write.csv("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.csv")  #To be shared
data %>%
# write.csv("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.csv")  #To be shared
write_rds("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.rds")
#Reading in Shape files
dis_shp <- read_sf("Ehsaas_dashboard/Main_data/Districts_shp_usual/pakistan_indicators.shp") %>%
st_as_sf() %>%
clean_names() %>%
filter(year == 2018) %>%
select(district ,geometry) %>%
arrange(district) %>%
st_transform(crs = "+init=epsg:4326") %>%
write_rds("Ehsaas_dashboard/Ehsaas/data/pak_shp.rds")
#Reading in Shape files
dis_shp <- read_sf("Ehsaas_dashboard/Main_data/Districts_shp_usual/pakistan_indicators.shp") %>%
st_as_sf() %>%
clean_names() %>%
filter(year == 2018) %>%
select(district ,geometry) %>%
arrange(district) %>%
st_transform(crs = "+init=epsg:4326") %>%
write_rds("Ehsaas_dashboard/Ehsaas/data/pak_shp.rds")
ehsaas_data$Category_2 <-
ehsaas_data$Category_2 %>%
clean_names() %>%
rename(province = province_cat2,
district = district_cat2,
no_of_eligible_beneficiaries = no_of_eligible_beneficiaries_cat2,
amount_deposited_in_accounts = amount_deposited_in_accounts_cat2,
no_of_beneficiaries_paid = no_of_beneficiaries_served_cat2,
amount_withdrawn = amount_withdrawl_cat2
) %>% # <--
filter(province != "AJK",
province != "GB") %>%
arrange(district) %>%
mutate(district = str_to_title(district)) %>%
mutate(province = str_to_title(province)) %>%
# mutate(tehsil_area = str_to_title(tehsil_area)) %>%
mutate(province = if_else(province== "Kp", "KP", province)) %>%
mutate(district = if_else(district== "Shaheed Benazir Abad", "Shaheed Benazirabad", district)) %>%
group_by(district) %>%
summarise(no_of_eligible_beneficiaries = sum(no_of_eligible_beneficiaries),
amount_deposited_in_accounts = sum(amount_deposited_in_accounts),
no_of_beneficiaries_paid = sum(no_of_beneficiaries_paid),
amount_withdrawn = sum(amount_withdrawn)) %>%
mutate(district = case_when(
district == "T A Adj Bannu" ~ "FR Bannu",
district == "T A Adj D.i.khan" ~ "FR Dera Ismail Khan",
district == "T A Adj Kohat" ~ "FR Kohat",
district == "T A Adj Peshawar" ~ "FR Peshawar",
district == "T A Adj Tank" ~ "FR Tank",
district == "T.a.adj.lakki Marwat" ~ "FR Lakki Marwat",
district == "D. I. Khan" ~  "Dera Ismail Khan",
district == "Karachi Central" ~ "Karachi City",
district == "Karachi East" ~ "Karachi City",
district == "Karachi Malir" ~ "Karachi City",
district == "Karachi South" ~ "Karachi City",
district == "Karachi West" ~ "Karachi City",
district == "Malakand P Area" ~ "Malakand PA",
district == "Sajawal" ~ "Sujawal",
district == "S Waziristan Agency" ~ "South Waziristan Agency",
district == "N Waziristan Agency" ~ "North Waziristan Agency",
district == "Sherani" ~ "Sheerani",
district == "Kambar Shahdad Kot" ~ "Qambar Shahdadkot",
district == "Lasbela" ~ "Las Bela",
district == "Leiah" ~ "Layyah",
district == "Sibbi" ~ "Sibi",
district == "Tando Allahyar" ~ "Tando Allah Yar",
district == "Tor Garh" ~ "Tor Ghar",
district == "Umer Kot" ~ "Umerkot",
TRUE ~ district)) %>%
arrange(district) %>%
group_by(district) %>%
summarise(no_of_eligible_beneficiaries = sum(no_of_eligible_beneficiaries),
amount_deposited_in_accounts = sum(amount_deposited_in_accounts),
no_of_beneficiaries_paid = sum(no_of_beneficiaries_paid),
amount_withdrawn = sum(amount_withdrawn)) %>%
filter(
!district == "Korangi",
!district == "Malir",
!district == "Duki",
!district == "Shaheed Sikandarabad"
) %>%   #Dropping Kambar Shahadat Kot, Korangi since not available in shapfile
#Also aggregating all Karachi dsitricts into Karachi City
mutate(share_of_actual_to_eligible_beneficiaries= no_of_beneficiaries_paid/no_of_eligible_beneficiaries * 100) %>%
left_join(pak_ind, by ="district") %>%
left_join(pakistan_indicators, by= "district") %>%
left_join(census, by= "district") %>%
mutate(eligible_beneficiaries_relative_to_district_population = (no_of_eligible_beneficiaries  * (hhsize / 1.3)) / (pop * (1+pop_gr^5)) * 100 ,
actual_beneficiaries_relative_to_district_population = (no_of_beneficiaries_paid * (hhsize / 1.3)) / (pop * (1+pop_gr^5))* 100  ) %>%
# mutate(eligible_beneficiaries_relative_to_district_population=no_of_eligible_beneficiaries/population *100,
#        actual_beneficiaries_relative_to_district_population= no_of_beneficiaries_paid/population* 100) %>%
mutate(
amount_deposited_in_accounts = amount_deposited_in_accounts / 1000000,
amount_withdrawn = amount_withdrawn / 1000000,
population = pop / 1000000) %>%
pivot_longer(cols =no_of_eligible_beneficiaries:actual_beneficiaries_relative_to_district_population,
names_to = "indicator", values_to = "value") %>%
mutate(category = "Category 2") %>%
mutate(indicator = str_to_title(str_replace_all(indicator, "_", " "))) %>%
left_join(units, by="indicator") %>%
filter(indicator!= "Household Size",
indicator!= "Pop",
indicator!=  "Hhsize",
indicator!= "Pop Gr",
indicator!= "Population") %>%
pivot_wider(names_from = district, values_from = value) %>%
mutate(`North Waziristan Agency` = NA,
`Tor Ghar` = NA) %>%
pivot_longer(cols = -c("indicator", "category", "unit") ,
names_to = "district",
values_to = "value") %>%
arrange(district)
source("C:/Users/wb578340/OneDrive - WBG/Ehsaas_Dashboard/Ehsaas_dashboard/Main_data/data_prep_districts.R", echo=TRUE)
data %>%
write.csv("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.csv")  #To be shared
shiny::runApp('Ehsaas_dashboard/Ehsaas')
runApp('Ehsaas_dashboard/Ehsaas')
runApp('Ehsaas_dashboard/Ehsaas')
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(leaflet)
library(dplyr)
library(glue)
library(shinyscreenshot)
library(sf)
library(stringr)
#Reading in Data
data <- readRDS("data/ehsaas_clean.rds")
runApp('Ehsaas_dashboard/Ehsaas')
read.dcf(system.file("DESCRIPTION", package = "shiny", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "shinythemes", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "shinythemes", mustWork = TRUE))
library(shinythemes)
read.dcf(system.file("DESCRIPTION", package = "shinythemes", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "shinythemes", mustWork = TRUE))
install.packages("shinythemes")
install.packages("shinythemes")
shiny::runApp('Ehsaas_dashboard/Ehsaas')
runApp('Ehsaas_dashboard/Ehsaas')
read.dcf(system.file("DESCRIPTION", package = "shinythemes", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "shinycssloaders", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "leaflet", mustWork = TRUE))
read.dcf(system.file("DESCRIPTION", package = "shinyscreenshot", mustWork = TRUE))
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(leaflet)
library(dplyr)
library(glue)
library(shinyscreenshot)
library(sf)
library(stringr)
#Reading in Data
data <- readRDS("data/ehsaas_clean.rds")
#Reading in Data
data <- readRDS("Ehsaas_dashboard/Ehsaas/data/ehsaas_clean.rds")
#Reading in Shape file
pak_shp <- readRDS("Ehsaas_dashboard/Ehsaas/data/pak_shp.rds")
#User Interface
ui <- navbarPage(tags$strong(tags$em("EHSAAS DASHBOARD")),
tabPanel("INTERACTIVE MAPS",
bootstrapPage(theme = shinytheme("flatly")),
tags$style(type = 'text/css', '#map {height: calc(100vh - 80px) !important;}', style= 'padding-top:0px;'),
leafletOutput("map") %>%
withSpinner(),
br(),
tags$head(tags$style("#source{color:black; font-size:12px; font-style:italic; max-height: 110px; background: #ffe6cc; }")),
verbatimTextOutput("source"),
absolutePanel(id = "controls", class = "panel panel-default", fixed= TRUE,
draggable = TRUE, bottom = "auto", right = "auto", left = 70, top = 95,
width = 260, height = "auto",
style = "background-color: white;
opacity: 0.85;
padding: 20px 20px 20px 20px;
margin: auto;
border-radius: 5pt;
box-shadow: 0pt 0pt 6pt 0px rgba(61,59,61,0.48);
padding-bottom: 2mm;
padding-top: 1mm;",
# br(),
selectInput("cat_map",
"Choose Category",
choices = unique(data$category)),
selectInput("stat_map",
"Choose Indicator",
choices = (unique(data$indicator)),
selected= (unique(data$indicator)[2])),
# h6(tags$b(tags$em("Use the Radio-Buttons below to change the color-pallette using Actual Values or Deciles"))),
radioButtons("pallettes", "Change Color Scheme based on", inline =TRUE,
choices = list("Values" = "pallette1", "Deciles" = "pallette2")),
# radioButtons("polygon", "Switch b/w Tehsils and Districts", inline = TRUE,
#              choices = list("Districts" = "polygon1", "Tehsils" = "polygon2")),
h6(tags$b(tags$em("Use the buttons below to download the data underlying the current on-screen map and screenshot"))),
downloadButton("mapdata", "Get Data", class = "btn-sm"),
actionButton("screenshot", "Screenshot", class= "btn-sm", icon = icon("camera")),
br()
)
),
# style = 'padding-left:0px;',
tags$head(tags$style("#source{color:black; font-size:12px; font-style:italic; max-height: 120px; background: yellow;}")),
verbatimTextOutput("source")
)
server <- function(input, output, session){
# d0 <- reactive({
#   data %>%
#     filter(
#       category == input$cat_map)
# })
d1 <- reactive({
data %>%
filter(
category == input$cat_map,
indicator == input$stat_map)
})
map_1 <- reactive({
#Labelling for the Map
labels <- reactive({
paste0(glue::glue("<b> District: <b> { str_to_title(unique(pak_shp$district)) }</br>"), glue::glue("<b> { d1()$indicator }: </b>"), " ", glue::glue("{ round(d1()$value, 2) }"), " ", unique(d1()$unit) , sep = "") %>%
lapply(htmltools::HTML)
})
pal <- reactive({
colorBin(palette = c('#d7191c','#fdae61','#ffffbf','#abd9e9','#2c7bb6'), bins=7, na.color = "grey",  domain= d1()$value, reverse=T)
})
# st_transform(pak_shp, crs = "+init=epsg:4326") %>%   #pak_shp, crs = "+init=epsg:4326" , "+proj=longlat +ellps=WGS84 +datum=WGS84"
leaflet(pak_shp, options = leafletOptions(zoomSnap = 0.20,
zoomDelta = 0.20)) %>%
addProviderTiles(providers$Esri, group = "ESRI") %>%
addProviderTiles(providers$OpenStreetMap , group = "OpenStreetMap") %>%
addProviderTiles(providers$Stamen.Terrain,
options = tileOptions(minZoom = 0,
maxZoom = 13),
group = "ST Terrain") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addProviderTiles(providers$Esri.WorldImagery , group = "ESRI IMG") %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012 , group = "NASA Nightlights") %>%
setView(lng=69, lat = 31, zoom = 5.12) %>%
addPolygons(label= labels(),
labelOptions = labelOptions(
style = list("font-weight"= "normal",
padding= "3px 8px",
"color"= "#cc4c02"),
textsize= "15px",
direction = "auto"
),
fillColor =  ~pal()(d1()$value),
fillOpacity = 0.9,
stroke = TRUE,
color= "white",
weight = 1,
opacity = 0.7,
fill = TRUE,
dashArray = NULL,
smoothFactor = 0.5,
highlightOptions = highlightOptions(weight= 5,
fillOpacity = 1,
opacity= 1,
bringToFront = TRUE),
group = "Polygons") %>%
addLayersControl(baseGroups = c("ESRI", "OpenStreetMap", "ST Terrain", "Toner Lite","ESRI IMG", "NASA Nightlights"),
overlayGroups = c("Polygons"),
options = layersControlOptions(collapsed = TRUE)) %>%
addMeasure() %>%
addScaleBar("bottomright") %>%
addLegend("bottomright",
pal= pal() ,
values= ~d1()$value,
title = glue("Legend", " ", "{ unique(d1()$unit)}"),
opacity= 1)
})
map_2 <- reactive({
#Labelling for the Map
labels <- reactive({
paste0(glue::glue("<b> District: <b> { str_to_title(unique(pak_shp$district)) }</br>"), glue::glue("<b> { d1()$indicator }: </b>"), " ", glue::glue("{ round(d1()$value, 2) }") , " " , unique(d1()$unit), sep = "") %>%
lapply(htmltools::HTML)
})
pal <- reactive({
colorQuantile(palette = c('#a50026','#d73027','#f46d43','#fdae61','#fee090','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695'), n= 10 , na.color = "grey",  domain= unique(d1()$value), reverse=T)
})
# st_transform(pak_shp, crs = "+init=epsg:4326") %>%   #pak_shp, crs = "+init=epsg:4326" , "+proj=longlat +ellps=WGS84 +datum=WGS84"
leaflet(pak_shp, options = leafletOptions(zoomSnap = 0.20,
zoomDelta = 0.20)) %>%
addProviderTiles(providers$Esri, group = "ESRI") %>%
addProviderTiles(providers$OpenStreetMap , group = "OpenStreetMap") %>%
addProviderTiles(providers$Stamen.Terrain,
options = tileOptions(minZoom = 0,
maxZoom = 13),
group = "ST Terrain") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addProviderTiles(providers$Esri.WorldImagery , group = "ESRI IMG") %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012 , group = "NASA Nightlights") %>%
setView(lng=69, lat = 31, zoom = 5.12) %>%
addPolygons(label= labels(),
labelOptions = labelOptions(
style = list("font-weight"= "normal",
padding= "3px 8px",
"color"= "#cc4c02"),
textsize= "15px",
direction = "auto"
),
fillColor =  ~pal()(d1()$value),
fillOpacity = 0.9,
stroke = TRUE,
color= "white",
weight = 1,
opacity = 0.7,
fill = TRUE,
dashArray = NULL,
smoothFactor = 0.5,
highlightOptions = highlightOptions(weight= 5,
fillOpacity = 1,
opacity= 1,
bringToFront = TRUE),
group = "Polygons") %>%
addLayersControl(baseGroups = c("ESRI", "OpenStreetMap", "ST Terrain", "Toner Lite","ESRI IMG", "NASA Nightlights"),
overlayGroups = c("Polygons"),
options = layersControlOptions(collapsed = TRUE)) %>%
addMeasure() %>%
addScaleBar("bottomright") %>%
addLegend("bottomright",
pal= pal() ,
values= ~d1()$value,
title = "Deciles",
opacity= 1)
})
#Rendering both maps
observeEvent(input$pallettes,{
if(input$pallettes == "pallette1"){
map_1()
output$map <- renderLeaflet({
map_1()
})
}
if(input$pallettes == "pallette2"){
map_2()
output$map <- renderLeaflet({
map_2()
})
}
})
#Main Map screenshot
observeEvent(input$screenshot,{
screenshot(filename = glue("{ input$stat_map }", " ", "map_screenshot"), selector = "#map", scale = 0.8, timer = 1)
})
#Main map current on-screen data download
output$mapdata <- downloadHandler(
filename = function(){
paste(glue("{ input$stat_map }"), ".csv")
},
content = function(file){
write.csv(d1(), file)
}
)
#Source
output$source <- renderText({
glue(
"{ unique(d1()$source2) }",
"\n",
"{ unique(d1()$source1) }",
)
})
}
shinyApp(ui, server)
runApp('Ehsaas_dashboard/Ehsaas')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
install.packages("sf")
shiny::runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
library(shiny)
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(leaflet)
library(dplyr)
library(glue)
library(shinyscreenshot)
library(sf)
library(stringr)
library(magrittr)
#Reading in Data
data <- readRDS("data/ehsaas_clean.rds")
library(shiny)
library(shinythemes)
library(shinycssloaders)
library(leaflet)
library(dplyr)
library(glue)
library(shinyscreenshot)
library(sf)
library(stringr)
library(magrittr)
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
shiny::runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
View(data)
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
data[, "source1"]
unique(data[, "source1"])
unique(data[, "source2"])
runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
shiny::runApp('Ehsaas_dashboard/Ehsaas_Dashboard')
